{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./index.ts","webpack:///./lib/api.ts","webpack:///external \"express\"","webpack:///external \"body-parser\"","webpack:///external \"param-case\""],"names":["root","factory","exports","module","define","amd","a","i","global","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_PORT","DEFAULT_NAME_PREFIX","DEFAULT_NAME","toString","launched","app","launch","config","newApp","use","urlencoded","extended","json","beforeListen","listen","port","injectLaunchCode","injectedLaunch","apiMountFactory","sharedConfig","basePath","exposeClassBasedApi","obj","className","constructor","Error","namespace","paramCase","this","exposeApi","api","performLaunch","entries","method","push","forEach","implementation","post","req","res","beforeExecution","lastResponse","error","executeAfterResponse","afterResponse","apply","body","args","then","response","beforeResponse","catch","e","status","message","stack","require"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export * from './lib/api'\r\n","import express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport {Express, Request, Response} from 'express'\r\nimport {paramCase} from 'param-case'\r\n\r\n/**\r\n * Default server port\r\n */\r\nexport const DEFAULT_PORT = 3000\r\n\r\n/**\r\n * Default express app name prefix\r\n * If multiple apps are launched on different ports, by default this prefix will be used\r\n */\r\nexport const DEFAULT_NAME_PREFIX = 'default_'\r\n\r\n/**\r\n * Default express app name\r\n * In theory there can be multiple but this is rarely needed\r\n */\r\nexport const DEFAULT_NAME = `${DEFAULT_NAME_PREFIX}${DEFAULT_PORT.toString()}`\r\n\r\n/**\r\n * API method\r\n */\r\nexport type IApiMountApiHandler = (...args: any[]) => Promise<any> | any\r\n\r\n/**\r\n * Collection of API methods\r\n */\r\nexport type IApiMountApi = object\r\n\r\n/**\r\n * Hook for altering Express configuration\r\n */\r\nexport type IApiMountBeforeListen = (app: Express) => void\r\n\r\n/**\r\n * Hook to inject code before API execution\r\n * @param method name of called method\r\n * @param implementation implementation of called method\r\n * @param context context of this for called method implementation\r\n * @returns false prevents further default execution of request handler\r\n */\r\nexport type IApiMountBeforeExecution = (\r\n  method: string,\r\n  implementation: IApiMountApiHandler,\r\n  context: IApiMountApi,\r\n  req: Request,\r\n  res: Response,\r\n) => boolean\r\n\r\n/**\r\n * Hook to inject custom server response logic after API execution\r\n * @param response API method response after execution\r\n * @param error true if API method exited with an error\r\n * @param method name of method which has been called\r\n * @returns false prevents automatic response from request handler\r\n */\r\nexport type IApiMountBeforeResponse = (\r\n  response: any,\r\n  error: boolean,\r\n  method: string,\r\n  req: Request,\r\n  res: Response,\r\n) => boolean\r\n\r\n/**\r\n * Hook to inject logic after server responds\r\n * @param response API method response after it is sent out\r\n * @param error true if API method exited with an error\r\n * @param method name of method which has been called\r\n */\r\nexport type IApiMountAfterResponse = (\r\n  response: any,\r\n  error: boolean,\r\n  method: string,\r\n) => void\r\n\r\n/**\r\n * API Mount Configuration\r\n */\r\nexport interface IApiMountConfig {\r\n  /**\r\n   * Express APP name - only needed in corner case when there are several\r\n   */\r\n  name?: string\r\n\r\n  /**\r\n   * Base path for end-points\r\n   */\r\n  basePath?: string\r\n\r\n  /**\r\n   * Hook for altering Express configuration\r\n   */\r\n  beforeListen?: IApiMountBeforeListen\r\n\r\n  /**\r\n   * Hook for injecting logic before execution\r\n   */\r\n  beforeExecution?: IApiMountBeforeExecution\r\n\r\n  /**\r\n   * Hook for customizing server response logic\r\n   */\r\n  beforeResponse?: IApiMountBeforeResponse\r\n\r\n  /**\r\n   * Hook for injecting logic after server responds\r\n   */\r\n  afterResponse?: IApiMountAfterResponse\r\n}\r\n\r\n/**\r\n * Shared API Mount Configuration\r\n */\r\nexport interface ISharedApiMountConfig extends IApiMountConfig {\r\n  /**\r\n   * Server port number\r\n   */\r\n  port?: number\r\n}\r\n\r\n/**\r\n * Method which is responsible for initializing and launching Express server\r\n */\r\nexport type IApiMountLauncher = (config: ISharedApiMountConfig) => Express\r\n\r\ninterface IApiMountLaunchCache {\r\n  [hash: string]: boolean\r\n}\r\n\r\ninterface IApiMountAppCache {\r\n  [hash: string]: Express\r\n}\r\n\r\ninterface IApiMountAppLaunchCache {\r\n  [hash: string]: IApiMountLauncher\r\n}\r\n\r\nconst launched: IApiMountLaunchCache = {}\r\nconst app: IApiMountAppCache = {}\r\n\r\nconst launch: IApiMountAppLaunchCache = {\r\n  [DEFAULT_NAME]: (config: ISharedApiMountConfig) => {\r\n    const newApp = express()\r\n    newApp.use(bodyParser.urlencoded({extended: false}))\r\n    newApp.use(bodyParser.json())\r\n    config.beforeListen?.(newApp)\r\n    newApp.listen(config.port)\r\n    return newApp\r\n  },\r\n}\r\n\r\nconst performLaunch = (config: ISharedApiMountConfig) => {\r\n  if (!launched[config.name]) {\r\n    app[config.name] = launch[config.name]\r\n      ? launch[config.name](config)\r\n      : launch[DEFAULT_NAME](config)\r\n    launched[config.name] = true\r\n  }\r\n}\r\n\r\n/**\r\n * Allows overriding Express server initialization and launch\r\n * @param injectedLaunch injected launcher method\r\n * @param name Express app name - only needed if several Express instances are used\r\n */\r\nexport const injectLaunchCode = (\r\n  injectedLaunch: IApiMountLauncher,\r\n  name: string = DEFAULT_NAME,\r\n) => {\r\n  launch[name] = injectedLaunch\r\n}\r\n\r\n/**\r\n * API Mount factory\r\n * @param sharedConfig default configuration for exposed APIs\r\n * @returns object which is capable of exposing APIs\r\n */\r\nexport const apiMountFactory = (sharedConfig: ISharedApiMountConfig = {}) => {\r\n  sharedConfig = {\r\n    port: DEFAULT_PORT,\r\n    basePath: '',\r\n    ...sharedConfig,\r\n  }\r\n\r\n  if (!sharedConfig.name) {\r\n    sharedConfig.name = DEFAULT_NAME_PREFIX + sharedConfig.port.toString()\r\n  }\r\n\r\n  return {\r\n    /**\r\n     * Expose class-based (named) object as an API\r\n     * @param obj object of API methods - has to be based on class\r\n     * @param config API Hook configuration\r\n     */\r\n    exposeClassBasedApi(\r\n      obj: IApiMountApi,\r\n      config: IApiMountConfig = sharedConfig,\r\n    ) {\r\n      config = {\r\n        ...sharedConfig,\r\n        ...config,\r\n      }\r\n\r\n      const className = (obj as any).name || obj.constructor.name\r\n\r\n      if (className) {\r\n        const namespace = paramCase(className)\r\n        this.exposeApi(obj, {basePath: `${config.basePath}/${namespace}`})\r\n      } else {\r\n        throw new Error(\r\n          'Could not expose object which is not based on a class!',\r\n        )\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Expose object as an API\r\n     * @param api object of API methods\r\n     * @param config API Hook configuration\r\n     */\r\n    exposeApi(api: IApiMountApi, config: IApiMountConfig = sharedConfig) {\r\n      config = {\r\n        ...sharedConfig,\r\n        ...config,\r\n      }\r\n\r\n      performLaunch(config)\r\n\r\n      const {name, basePath} = config\r\n\r\n      const entries = []\r\n\r\n      // tslint:disable-next-line:forin\r\n      for (const method in api) {\r\n        entries.push([method, (api as any)[method]])\r\n      }\r\n\r\n      entries.forEach(([method, implementation]) => {\r\n        app[name].post(`${basePath}/${paramCase(method)}`, (req, res) => {\r\n          if (\r\n            !(\r\n              config.beforeExecution?.(method, implementation, api, req, res) ??\r\n              true\r\n            )\r\n          ) {\r\n            return\r\n          }\r\n\r\n          let lastResponse: any\r\n          let error = false\r\n\r\n          const callImplementation = async () =>\r\n            await implementation.apply(api, req.body?.args || {args: []})\r\n\r\n          const executeAfterResponse = () => {\r\n            config.afterResponse?.(lastResponse, error, method)\r\n          }\r\n\r\n          callImplementation()\r\n            .then((response: any) => {\r\n              if (\r\n                config.beforeResponse?.(response, false, method, req, res) ??\r\n                true\r\n              ) {\r\n                res.json(response)\r\n              }\r\n\r\n              lastResponse = response\r\n              executeAfterResponse()\r\n            })\r\n            .catch((e: any) => {\r\n              if (config.beforeResponse?.(e, true, method, req, res) ?? true) {\r\n                res.status(500)\r\n\r\n                if (e instanceof Error) {\r\n                  res.json({name: e.name, message: e.message, stack: e.stack})\r\n                } else {\r\n                  res.json(e)\r\n                }\r\n              }\r\n\r\n              lastResponse = e\r\n              error = true\r\n              executeAfterResponse()\r\n            })\r\n        })\r\n      })\r\n    },\r\n  }\r\n}\r\n","module.exports = require(\"express\");","module.exports = require(\"body-parser\");","module.exports = require(\"param-case\");"],"sourceRoot":""}