declare module 'api-mount-server/index' {
  export * from 'api-mount-server/lib/api';

}
declare module 'api-mount-server/lib/api' {
  import { Express, Request, Response } from 'express';
  /**
   * Default server port
   */
  export const DEFAULT_PORT = 3000;
  /**
   * Default express app name prefix
   * If multiple apps are launched on different ports, by default this prefix will be used
   */
  export const DEFAULT_NAME_PREFIX = "default_";
  /**
   * Default express app name
   * In theory there can be multiple but this is rarely needed
   */
  export const DEFAULT_NAME: string;
  /**
   * API method
   */
  export type IApiMountApiHandler = (...args: any[]) => Promise<any> | any;
  /**
   * Collection of API methods
   */
  export type IApiMountApi = object;
  /**
   * Hook for altering Express configuration
   */
  export type IApiMountBeforeListen = (app: Express) => void;
  /**
   * Hook to inject code before API execution
   * @param method name of called method
   * @param implementation implementation of called method
   * @param context context of this for called method implementation
   * @returns false prevents further default execution of request handler
   */
  export type IApiMountBeforeExecution = (method: string, implementation: IApiMountApiHandler, context: IApiMountApi, req: Request, res: Response) => boolean;
  /**
   * Hook to inject custom server response logic after API execution
   * @param response API method response after execution
   * @param error true if API method exited with an error
   * @param method name of method which has been called
   * @returns false prevents automatic response from request handler
   */
  export type IApiMountBeforeResponse = (response: any, error: boolean, method: string, req: Request, res: Response) => boolean;
  /**
   * Hook to inject logic after server responds
   * @param response API method response after it is sent out
   * @param error true if API method exited with an error
   * @param method name of method which has been called
   */
  export type IApiMountAfterResponse = (response: any, error: boolean, method: string) => void;
  /**
   * API Mount Configuration
   */
  export interface IApiMountConfig {
      /**
       * Express APP name - only needed in corner case when there are several
       */
      name?: string;
      /**
       * Base path for end-points
       */
      basePath?: string;
      /**
       * Hook for altering Express configuration
       */
      beforeListen?: IApiMountBeforeListen;
      /**
       * Hook for injecting logic before execution
       */
      beforeExecution?: IApiMountBeforeExecution;
      /**
       * Hook for customizing server response logic
       */
      beforeResponse?: IApiMountBeforeResponse;
      /**
       * Hook for injecting logic after server responds
       */
      afterResponse?: IApiMountAfterResponse;
  }
  /**
   * Shared API Mount Configuration
   */
  export interface ISharedApiMountConfig extends IApiMountConfig {
      /**
       * Server port number
       */
      port?: number;
  }
  /**
   * Method which is responsible for initializing and launching Express server
   */
  export type IApiMountLauncher = (config: ISharedApiMountConfig) => Express;
  /**
   * Allows overriding Express server initialization and launch
   * @param injectedLaunch injected launcher method
   * @param name Express app name - only needed if several Express instances are used
   */
  export const injectLaunchCode: (injectedLaunch: IApiMountLauncher, name?: string) => void;
  /**
   * API Mount factory
   * @param sharedConfig default configuration for exposed APIs
   * @returns object which is capable of exposing APIs
   */
  export const apiMountFactory: (sharedConfig?: ISharedApiMountConfig) => {
      /**
       * Expose class-based (named) object as an API
       * @param obj object of API methods - has to be based on class
       * @param config API Hook configuration
       */
      exposeClassBasedApi(obj: IApiMountApi, config?: IApiMountConfig): void;
      /**
       * Expose object as an API
       * @param api object of API methods
       * @param config API Hook configuration
       */
      exposeApi(api: IApiMountApi, config?: IApiMountConfig): void;
  };

}
declare module 'api-mount-server' {
  import main = require('api-mount-server/index');
  export = main;
}